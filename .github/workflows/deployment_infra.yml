# Файл: .github/workflows/yc-infra.yml

name: YC Infrastructure Deploymen
on:
  push:
    branches:
      - main  
jobs:
  # Первый job - создание сервисного аккаунта
  create-sa:
    runs-on: ubuntu-latest
    environment: env
      

    outputs:
      sa_id: ${{ steps.create-sa.outputs.sa_id }}
      sa_key: ${{ steps.create-sa.outputs.sa_key }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.x
          
      - name: Install YC CLI
        run: |
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh -o ./install.sh
          bash ./install.sh -i ~/
          export PATH="$PATH:$HOME/bin"
          
      - name: Add yc to PATH
        env:
          YC_AUTH_KEY: ${{ secrets.YC_TOKEN }}
        run: |
          echo $YC_AUTH_KEY > $HOME/authorized_key.json
          
      - name: Create Service Account
        env:
          TF_VAR_auth_file: ${{ secrets.YC_TOKEN }}
          TF_VAR_region: ${{ secrets.TF_VAR_REGION }}
          TF_VAR_folder_id: ${{ secrets.TF_VAR_FOLDER_ID }}
          TF_VAR_cloud_id: ${{ secrets.TF_VAR_CLOUD_ID }}
        id: create-sa
        run: |
          terraform -chdir=sa init
          terraform -chdir=sa apply -auto-approve
          sa_id=$(terraform -chdir=sa output -raw service_account_id)
          sa_key=$(terraform -chdir=sa output -raw service_account_key)
          echo "::set-output name=sa_id::$sa_id"
          echo "::set-output name=sa_key::$sa_key"

  # Второй job - создание бакета
  create-bucket:
    runs-on: ubuntu-latest
    environment: env
    needs: [create-sa]
    outputs:
      bucket_name: ${{ steps.create-bucket.outputs.bucket_name }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.x
          
      # Установка Yandex Cloud CLI
      - name: Install Yandex Cloud CLI
        run: |
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh -o ./install.sh
          bash ./install.sh -i ~/
          export PATH="$PATH:$HOME/bin"
          
      # Добавить 
      - name: Add yc to PATH
        env:
          YC_AUTH_KEY: ${{ secrets.YC_TOKEN }}
          TF_VAR_auth_file: $HOME/authorized_key.json
          TF_VAR_region: ${{ secrets.TF_VAR_REGION }}
          TF_VAR_folder_id: ${{ secrets.TF_VAR_FOLDER_ID }}
          TF_VAR_cloud_id: ${{ secrets.TF_VAR_CLOUD_ID }}
        run: |
          echo $YC_AUTH_KEY > $HOME/authorized_key.json
        
      # Авторизация в Yandex Cloud
      - name: Authenticate with Yandex Cloud
        run: |
          export PATH="$PATH:$HOME/bin"
          yc config profile create deploy
          yc config set service-account-key $HOME/authorized_key.json
        
          
      - name: Create Bucket
        id: create-bucket
        run: |
          terraform -chdir=bucket init
          terraform -chdir=bucket apply -auto-approve
          bucket_name=$(terraform -chdir=bucket output -raw bucket_name)
          echo "::set-output name=bucket_name::$bucket_name"

  # Третий job - развертывание основной инфраструктуры
  deploy-infra:
    runs-on: ubuntu-latest
    environment: env
    needs: [create-bucket]
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.x
          
      - name: Install YC CLI
        run: |
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          source ~/.bashrc

      - name: Configure Backend
        run: |
          echo "bucket = ${{ needs.create-bucket.outputs.bucket_name }}" >> backend.tf
          echo "region = ru-central1" >> backend.tf
          
      - name: Deploy Infrastructure
        env:
          YC_SA_KEY: ${{ needs.create-sa.outputs.sa_key }}
          BUCKET_NAME: ${{ needs.create-bucket.outputs.bucket_name }}
          TF_VAR_region: ${{ secrets.TF_VAR_REGION }}
          TF_VAR_folder_id: ${{ secrets.TF_VAR_FOLDER_ID }}
          TF_VAR_cloud_id: ${{ secrets.TF_VAR_CLOUD_ID }}
        run: |
          terraform -chdir=infra init
          terraform -chdir=infra plan
          terraform -chdir=infra apply -auto-approve
